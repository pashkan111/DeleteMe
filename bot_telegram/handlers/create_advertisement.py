from aiogram import types
from aiogram.dispatcher import FSMContext
from ..loader import dp, bot
from .states import AuthState, SearchState, SearchStateUn
from aiogram.dispatcher.filters import Command
from aiogram.types import CallbackQuery, InputFile
from .api_queries import check_user, register_user, post_words, get_result, result, delete_keywords, get_user_data, test
from ..keyboards.choise_buttons import choice, choice2
import datetime, re
import math


data_for_registration = {}
now = datetime.date.today()
tel_id = []


@dp.message_handler(Command('start'))
async def answer(message: types.Message):
    username = message.from_user.full_name
    telegram_id = message.from_user.id
    tel_id.append(telegram_id)
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username} ‚úã')
    check = await check_user(telegram_id)
    if check == 400:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–¥–Ω–µ–µ ‚ö†')
    if not check:
        await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n'
                            '1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è'
    )
        await AuthState.name.set()
    else:
        try:
            res = await result({'telegram_id': telegram_id})
            if res:
                await message.answer('–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –¥–µ–ª–∞–ª–∏ –ø–æ–∏—Å–∫:')       
                text = ''
                for key, value in res.items():
                    text += '{key}. <b>{value}</b>\n'.format(key=key, value=value)
                await message.answer(text, reply_markup=choice2)
            else:
                await SearchState.key_words.set()
                await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
        except AttributeError:
            await message.answer('–û—à–∏–±–∫–∞. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É ‚ö†')


@dp.callback_query_handler(text_contains='delete')
async def del_keywords(call: CallbackQuery):
    await call.answer(cache_time=60)
    result = await delete_keywords({'telegram_id':tel_id[-1]})
    await SearchState.key_words.set()
    await call.message.answer('–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —É–¥–∞–ª–µ–Ω—ã\n'
                                '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
                                )


@dp.callback_query_handler(text_contains='add')
async def add_keywords(call: CallbackQuery):
    await call.answer(cache_time=60)
    await SearchState.key_words.set()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')


# @dp.callback_query_handler(text_contains='search')
# async def search_keywords(call: CallbackQuery, state: FSMContext):
#     await call.answer(cache_time=60)
#     # await SearchState.key_words.set()
#     await SearchState.next()


@dp.message_handler(state=SearchState.key_words)    
async def get_key_words(message: types.Message, state: FSMContext):
    key_words = message.text
    await state.update_data(key_words=key_words)
    data = await state.get_data()
    telegram_id = message.from_user.id
    data['telegram_id'] = telegram_id
    result = await post_words(data)
    await state.finish()
    await message.answer('–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º... üîç\n–ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç üìã')
    res = await get_result(data)
    user_data = await get_user_data({'telegram_id': telegram_id})
    if not user_data or not res:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–¥–Ω–µ–µ ‚ö†')
        return
    name = user_data['name']
    patronymic = user_data['patronymic']
    surname = user_data['surname']
    try:
        pdf = InputFile(path_or_bytesio=f'bot_telegram/handlers/reports/{name} {patronymic} {surname} –æ—Ç {now}.pdf')
        await bot.send_document(telegram_id, pdf)
    except:
        pass

@dp.message_handler(state=AuthState.name)    
async def save_name(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    await AuthState.next()
    await message.answer(text="2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é")


@dp.message_handler(state=AuthState.surname)    
async def save_surname(message: types.Message, state: FSMContext):
    surname = message.text
    await state.update_data(surname=surname)
    await AuthState.next()
    await message.answer(text="3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ")


@dp.message_handler(state=AuthState.patronymic)    
async def save_patronymic(message: types.Message, state: FSMContext):
    patronymic = message.text
    await state.update_data(patronymic=patronymic)
    await AuthState.next()
    await message.answer(text="4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–î–î/–ú–ú/–ì–ì–ì–ì'")


@dp.message_handler(state=AuthState.date_of_birth)    
async def save_date_of_birth(message: types.Message, state: FSMContext):
    date_of_birth = message.text
    pattern = r'\d{2}[-/]\d{2}[-/]\d{4}'
    result = re.findall(pattern, date_of_birth)
    if not result:
        await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã ‚ö†")
        return
    data = date_of_birth.split('/')
    day = int(data[0])
    month = int(data[1])
    year = int(data[2])
    await state.update_data(date_of_birth=f'{month}/{day}/{year}')
    await AuthState.next()
    await message.answer(text="5Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


@dp.message_handler(state=AuthState.phone)    
async def save_phone(message: types.Message, state: FSMContext):
    phone = message.text
    try:
        phone = int(phone)
    except:
        await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ ‚ö†") 
        return 
    if len(str(phone)) < 6:
        await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ ‚ö†")
        return
    await state.update_data(phone=phone)
    await AuthState.next()
    await message.answer(text="6Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥")


@dp.message_handler(state=AuthState.city)    
async def save_city(message: types.Message, state: FSMContext):
    city = message.text
    await state.update_data(city=city)
    data = await state.get_data()
    telegram_id = message.from_user.id
    data['telegram_id'] = telegram_id
    data_for_registration.setdefault(telegram_id, data)
    name = data['name']
    surname = data['surname']
    patronymic = data['patronymic']
    phone = data['phone']
    date_of_birth = data['date_of_birth']
    city = data['city']
    await state.finish()
    await message.answer(
        '–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?\n\n'
        f'1Ô∏è‚É£ –ò–º—è: <b>{name}</b>\n'
        f'2Ô∏è‚É£ –§–∞–º–∏–ª–∏—è: <b>{surname}</b>\n'
        f'3Ô∏è‚É£ –û—Ç—á–µ—Å—Ç–≤–æ: <b>{patronymic}</b>\n'
        f'4Ô∏è‚É£ –¢–µ–ª–µ—Ñ–æ–Ω: <b>{phone}</b>\n'
        f'5Ô∏è‚É£ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: <b>{date_of_birth}</b>\n'
        f'6Ô∏è‚É£ –ì–æ—Ä–æ–¥: <b>{city}</b>'
        , reply_markup=choice)


@dp.callback_query_handler(text_contains='accept')
async def accept_data(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await call.message.answer('–£–∫–∞–∂–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ üî†')
    await SearchStateUn.key_words.set()


@dp.callback_query_handler(text_contains='reject')
async def accept_data(call: CallbackQuery):
    await call.message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start')


@dp.message_handler(state=SearchStateUn.key_words)
async def get_key_words(message: types.Message, state: FSMContext):
    key_words = message.text
    await state.update_data(key_words=key_words)
    data = await state.get_data()
    telegram_id = message.from_user.id
    data['telegram_id'] = telegram_id
    await register_user(data_for_registration[telegram_id])    
    await post_words(data)
    await SearchStateUn.next()
    await message.answer('–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º... üîç\n–ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç üìã')
    await get_result(data)
    user_data = data_for_registration[telegram_id]
    name = user_data['name']
    patronymic = user_data['patronymic']
    surname = user_data['surname']
    try:
        pdf = InputFile(path_or_bytesio=f'bot_telegram/handlers/reports/{name} {patronymic} {surname} –æ—Ç {now}.pdf')
        await bot.send_document(telegram_id, pdf)
        await message.answer('–û—Ç—á–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω üìã')
    except:
        pass
    await message.answer('–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç? üï¢')


@dp.message_handler(state=SearchStateUn.amount)
async def get_amount(message: types.Message, state: FSMContext):
    amount = message.text
    telegram_id = message.from_user.id
    try:
        amount = int(amount)
    except ValueError:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚ö†')
        return
    if amount < 1:
        await message.answer('–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 ‚ö†')
        return
    elif amount > 30:
        await message.answer('–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 30 ‚ö†')
        return
    await state.update_data(amount=amount)
    await message.answer(f'–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã. –ö–∞–∂–¥—ã–µ {round(30/amount)} –¥–Ω–µ–π, –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –æ—Ç—á–µ—Ç üìãüìÖ')
    await message.answer('–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! ü§ö')
    await state.finish()
    await register_user(data_for_registration[telegram_id])
    data_for_registration.pop(telegram_id)


